// Code generated by ogen, DO NOT EDIT.

package api

type CreateUserApplicationJSONBadRequest Error

func (*CreateUserApplicationJSONBadRequest) createUserRes() {}

type CreateUserApplicationJSONInternalServerError Error

func (*CreateUserApplicationJSONInternalServerError) createUserRes() {}

// CreateUserNoContent is response for CreateUser operation.
type CreateUserNoContent struct{}

func (*CreateUserNoContent) createUserRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	// An error message.
	Message string `json:"message"`
	// The component at which the error happened.
	Component string `json:"component"`
	// A short identifier used for debugging purposes on the server's side.
	ActionId string `json:"actionId"`
}

// GetMessage returns the value of Message.
func (s Error) GetMessage() string {
	return s.Message
}

// GetComponent returns the value of Component.
func (s Error) GetComponent() string {
	return s.Component
}

// GetActionId returns the value of ActionId.
func (s Error) GetActionId() string {
	return s.ActionId
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetComponent sets the value of Component.
func (s *Error) SetComponent(val string) {
	s.Component = val
}

// SetActionId sets the value of ActionId.
func (s *Error) SetActionId(val string) {
	s.ActionId = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/User
type User struct {
	// The username of the user.
	Username string `json:"username"`
	// A 4-character discrimator used to distinguish similar usernames.
	Discriminator OptString `json:"discriminator"`
	// The email address of the user (for recovery purposes).
	Email OptString `json:"email"`
	// The password of the user.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s User) GetUsername() string {
	return s.Username
}

// GetDiscriminator returns the value of Discriminator.
func (s User) GetDiscriminator() OptString {
	return s.Discriminator
}

// GetEmail returns the value of Email.
func (s User) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s User) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

// SetDiscriminator sets the value of Discriminator.
func (s *User) SetDiscriminator(val OptString) {
	s.Discriminator = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val string) {
	s.Password = val
}
